{"remainingRequest":"/Users/user/coyote/h5lisdongruan/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/user/coyote/h5lisdongruan/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/user/coyote/h5lisdongruan/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/coyote/h5lisdongruan/src/pages/lisDetailInfoBox.vue?vue&type=template&id=d262a98c&scoped=true&","dependencies":[{"path":"/Users/user/coyote/h5lisdongruan/src/pages/lisDetailInfoBox.vue","mtime":1654784679874},{"path":"/Users/user/coyote/h5lisdongruan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/coyote/h5lisdongruan/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/user/coyote/h5lisdongruan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/coyote/h5lisdongruan/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}