{"remainingRequest":"/Users/user/coyote/h5appointmentSystem/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/user/coyote/h5appointmentSystem/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/user/coyote/h5appointmentSystem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/coyote/h5appointmentSystem/src/pages/vipInfoVip.vue?vue&type=template&id=510a8b94&scoped=true&","dependencies":[{"path":"/Users/user/coyote/h5appointmentSystem/src/pages/vipInfoVip.vue","mtime":1653887962529},{"path":"/Users/user/coyote/h5appointmentSystem/node_modules/cache-loader/dist/cjs.js","mtime":1653717749391},{"path":"/Users/user/coyote/h5appointmentSystem/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1653717770920},{"path":"/Users/user/coyote/h5appointmentSystem/node_modules/cache-loader/dist/cjs.js","mtime":1653717749391},{"path":"/Users/user/coyote/h5appointmentSystem/node_modules/vue-loader/lib/index.js","mtime":1653717770920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}